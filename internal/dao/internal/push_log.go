// ==========================================================================
// Code generated by GoFrame CLI tool. DO NOT EDIT.
// ==========================================================================

package internal

import (
	"context"

	"github.com/gogf/gf/v2/database/gdb"
	"github.com/gogf/gf/v2/frame/g"
)

// PushLogDao is the data access object for table push_log.
type PushLogDao struct {
	table   string         // table is the underlying table name of the DAO.
	group   string         // group is the database configuration group name of current DAO.
	columns PushLogColumns // columns contains all the column names of Table for convenient usage.
}

// PushLogColumns defines and stores column names for table push_log.
type PushLogColumns struct {
	Id          string // 推送日志表主键id
	PushInfo    string // 推送内容
	PushService string // 推送服务
	PushTime    string // 推送时间
	PushStatus  string // 推送状态
	ErrInfo     string // 错误日志
}

// pushLogColumns holds the columns for table push_log.
var pushLogColumns = PushLogColumns{
	Id:          "id",
	PushInfo:    "push_info",
	PushService: "push_service",
	PushTime:    "push_time",
	PushStatus:  "push_status",
	ErrInfo:     "err_info",
}

// NewPushLogDao creates and returns a new DAO object for table data access.
func NewPushLogDao() *PushLogDao {
	return &PushLogDao{
		group:   "default",
		table:   "push_log",
		columns: pushLogColumns,
	}
}

// DB retrieves and returns the underlying raw database management object of current DAO.
func (dao *PushLogDao) DB() gdb.DB {
	return g.DB(dao.group)
}

// Table returns the table name of current dao.
func (dao *PushLogDao) Table() string {
	return dao.table
}

// Columns returns all column names of current dao.
func (dao *PushLogDao) Columns() PushLogColumns {
	return dao.columns
}

// Group returns the configuration group name of database of current dao.
func (dao *PushLogDao) Group() string {
	return dao.group
}

// Ctx creates and returns the Model for current DAO, It automatically sets the context for current operation.
func (dao *PushLogDao) Ctx(ctx context.Context) *gdb.Model {
	return dao.DB().Model(dao.table).Safe().Ctx(ctx)
}

// Transaction wraps the transaction logic using function f.
// It rollbacks the transaction and returns the error from function f if it returns non-nil error.
// It commits the transaction and returns nil if function f returns nil.
//
// Note that, you should not Commit or Rollback the transaction in function f
// as it is automatically handled by this function.
func (dao *PushLogDao) Transaction(ctx context.Context, f func(ctx context.Context, tx gdb.TX) error) (err error) {
	return dao.Ctx(ctx).Transaction(ctx, f)
}
